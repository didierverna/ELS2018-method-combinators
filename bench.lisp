(defpackage :method-combinators/bench
  (:use :cl :method-combinators)
  (:export :bench))

(in-package ::method-combinators/bench)


(defgeneric test1/raw (i)
  (:method ((i number)) i)
  (:method ((i rational)) i)
  (:method ((i integer)) i)
  (:method ((i fixnum)) i))

(defcombined test1/std (i)
  (:method ((i number)) i)
  (:method ((i rational)) i)
  (:method ((i integer)) i)
  (:method ((i fixnum)) i))

(defgeneric test1/raw+ (i)
  (:method-combination +)
  (:method + ((i number)) i)
  (:method + ((i rational)) i)
  (:method + ((i integer)) i)
  (:method + ((i fixnum)) i))

(defcombined test1/+ (i)
  (:method-combinator :+)
  (:method ((i number)) i)
  (:method ((i rational)) i)
  (:method ((i integer)) i)
  (:method ((i fixnum)) i))


(defgeneric test2/raw (i)
  (:method ((i number)) (format t "Number ~A.~%" i))
  (:method ((i rational)) (format t "Rational ~A.~%" i))
  (:method ((i integer)) (format t "Integer ~A.~%" i))
  (:method ((i fixnum)) (format t "Fixnum ~A.~%" i)))

(defcombined test2/std (i)
  (:method ((i number)) (format t "Number ~A.~%" i))
  (:method ((i rational)) (format t "Rational ~A.~%" i))
  (:method ((i integer)) (format t "Integer ~A.~%" i))
  (:method ((i fixnum)) (format t "Fixnum ~A.~%" i)))

(defgeneric test2/raw-progn (i)
  (:method-combination progn)
  (:method progn ((i number)) (format t "Number ~A.~%" i))
  (:method progn ((i rational)) (format t "Rational ~A.~%" i))
  (:method progn ((i integer)) (format t "Integer ~A.~%" i))
  (:method progn ((i fixnum)) (format t "Fixnum ~A.~%" i)))

(defcombined test2/progn (i)
  (:method-combinator :progn)
  (:method ((i number)) (format t "Number ~A.~%" i))
  (:method ((i rational)) (format t "Rational ~A.~%" i))
  (:method ((i integer)) (format t "Integer ~A.~%" i))
  (:method ((i fixnum)) (format t "Fixnum ~A.~%" i)))


(defun bench ()
  (let ((iterations 100000000)
	;; Save one hash table lookup.
	(+-combinator (find-method-combinator :+)))
    (format *trace-output* "Timing the numerical test.~%~%")
    (format *trace-output* "Timing the raw version:~%")
    (time (dotimes (i iterations) (test1/raw 10)))
    (format *trace-output* "Timing the standard version:~%")
    (time (dotimes (i iterations) (test1/std 10)))
    (format *trace-output* "Timing the raw + version:~%")
    (time (dotimes (i iterations) (test1/raw+ 10)))
    (format *trace-output* "Timing the + version:~%")
    (time (dotimes (i iterations) (test1/+ 10)))
    (format *trace-output* "Timing the alternate + version:~%")
    (time (dotimes (i iterations)
	    (call-with-combinator +-combinator #'test1/std 10))))

  (let ((*standard-output* (make-broadcast-stream))
	(iterations 10000000)
	;; Save one hash table lookup.
	(progn-combinator (find-method-combinator :progn)))
    (format *trace-output* "Timing the printing test.~%~%")
    (format *trace-output* "Timing the raw version:~%")
    (time (dotimes (i iterations) (test2/raw 10)))
    (format *trace-output* "Timing the standard version:~%")
    (time (dotimes (i iterations) (test2/std 10)))
    (format *trace-output* "Timing the raw progn version:~%")
    (time (dotimes (i iterations) (test2/raw-progn 10)))
    (format *trace-output* "Timing the progn version:~%")
    (time (dotimes (i iterations) (test2/progn 10)))
    (format *trace-output* "Timing the alternate progn version:~%")
    (time (dotimes (i iterations)
	    (call-with-combinator progn-combinator #'test2/std 10)))))
